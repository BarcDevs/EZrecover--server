generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String  @id() @default(uuid())
  firstName String
  lastName  String
  username  String
  email     String  @unique
  image     String?
  role      Role    @default(USER)

  posts        Post[]
  replies      Reply[]
  followedTags Tag[]
  // followedCategories      String[]
  // followedAuthors         User[]

  // excluded from client
  password                String
  resetPasswordOTP        Int?
  resetPasswordExpiration DateTime?
  password_updated_at     DateTime  @default(now())
  created_at              DateTime  @default(now())
  active                  Boolean   @default(true)
  deleted_at              DateTime?

  @@index([email, created_at, active])
}

model Post {
  id        String    @id() @default(uuid())
  title     String
  body      String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  votes     Json      @default("{\"upvotedBy\": [], \"downvotedBy\": [], \"upvotes\": 0, \"downvotes\": 0}")
  replies   Reply[]
  views     Int       @default(0)
  category  String
  tags      Tag[]
}

model Reply {
  id        String    @id() @default(uuid())
  body      String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  votes     Json      @default("{\"upvotedBy\": [], \"downvotedBy\": [], \"upvotes\": 0, \"downvotes\": 0}")
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
}

model Tag {
  id          String   @id() @default(uuid())
  name        String   @unique
  description String?
  posts       Post[]
  followers   User[]
  createdAt   DateTime @default(now())
}
